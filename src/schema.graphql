# import * from './generated/prisma.graphql'

type LoginPayload{
  token:String!
  user:User!
} 

type Query {
    currentuser:User!
    comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
    users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
    user(where: UserWhereUniqueInput!): User
    gettestUser: testUser
}

type Mutation {
    signup(name:String, email:String, password:String):LoginPayload
    login(email:String, password:String):LoginPayload
    createBlog(title:String!):Blog #当前用户
    createComment(blogID:ID!, content:String!):Comment  #当前用户
    updateComment(commentID:ID!, content:String!):Comment  #当前用户
    deleteComment(commentID:ID!):Comment  #当前用户
    deleteBlog(blogID:ID!):Blog  #当前用户 
    createBlogByThisUser(title:String!,ownerUserID:ID!):Blog  
    updateCommentsByKeyWords(keywordsinContent:String!, newContent:String!):BatchPayload
    transCommentBetweenBlogs(fromBlogID:ID!,toBlogID:ID!):BatchPayload
    deleteManyCommentsByKeywords(keywords:String!):BatchPayload
    deleteUserByEmail(email:String!):User 
}

type Subscription{
  feedSubscription: BlogSubscriptionPayload!
}

type testUser{
    name:String!
}

type User implements Node {
    id: ID!
    name: String!
    name2: String
    email: String!
    password: String!
    comments: [Comment!]
    blogs: [Blog!]
    createdAt: DateTime!
    updatedAt: DateTime!
}